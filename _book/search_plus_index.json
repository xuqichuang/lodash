{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-03-31 23:54 "},"Array/_.chunk.html":{"url":"Array/_.chunk.html","title":"_.chunk","keywords":"","body":"_.chunk(array, [size=1]) 官方解释： Creates an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements. 释义： 创建一个按大小分成组的元素数组。如果数组不能被均匀地分割，最后的块将是剩下的元素。 理解： 数组中的元素n个为一组，组成一个二维数组， Since：3.0.0 参数： array(Array): 要处理的数组 [size=1](Number)： 每个块的长度，可以不传，默认为1 返回值： (Array): 返回分割之后的数组 例子： _.chunk(['a', 'b', 'c', 'd']); // => [['a'], ['b'], ['c'], ['d']] _.chunk(['a', 'b', 'c', 'd'], 2); // => [['a', 'b'], ['c', 'd']] _.chunk(['a', 'b', 'c', 'd'], 3); // => [['a', 'b', 'c'], ['d']] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 15:15 "},"Array/_.compact.html":{"url":"Array/_.compact.html","title":"_.compact","keywords":"","body":"_.compact(array) 官方解释： Creates an array with all falsey values removed. The values false, null, 0, \"\", undefined, and NaN are falsey. 释义： 创建一个删除了所有falsey值的数组。值false、null、0、\"\"、undefined和NaN都是假的。 理解： 把js中所有为假的数据都清除 Since：0.1.0 参数： array[Array]:将数组压缩 返回值： (Array): 返回压缩之后的数组 例子： _.compact([0, 1, false, 2, '', 3, undefined,'0', NaN]); // => [1, 2, 3, '0'] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 15:15 "},"Array/_.concat.html":{"url":"Array/_.concat.html","title":"_.concat","keywords":"","body":"_.concat(array,[values]) 官方解释： Creates a new array concatenating array with any additional arrays and/or values. 释义： 创建一个新数组，将数组与任何其他数组和/或值连接起来。 理解： 把第二个之后的参数都合并到第一个数组中，并不会改变第一个数组的值 Since：4.0.0 参数： array[Array]: 要连接的数组。 [values](...*): 要连接的值，任何数据类型的扩展 返回值： (Array): 返回合并之后的数组 例子： var array = [1]; var other = _.concat(array, 2, [3], [[4]]， {a: 2}); console.log(other); // => [1, 2, 3, [4], {a: 2}] console.log(array); // => [1] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 15:16 "},"Array/_.difference.html":{"url":"Array/_.difference.html","title":"_.diffenence","keywords":"","body":"_.difference(array,[values]) 官方解释： Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array. 释义： 使用SameValueZero创建不包含在其他给定数组中的数组值数组，用于相等性比较。结果值的顺序和引用由第一个数组决定。 理解： 检查第一个数组中哪些值在后一个数组中没有，并返回不同元素组成的新数组 Since：0.1.0 参数： array[Array]: 要检查的数组。 [values](...Array): 要排除的值，数组的扩展 返回值： (Array): 返回不同元素组成的新数组 例子： _.difference([2, 1], [2, 3]); // => [1] _.difference([2, 1, 4], [2, 3]); // => [1, 4] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 15:16 "},"Array/_.differenceBy.html":{"url":"Array/_.differenceBy.html","title":"_.differenceBy","keywords":"","body":".differenceBy(array, [values], [iteratee=.identity]) 官方解释： This method is like _.difference except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument: 释义： 这个方法就像_.difference。唯一不同的是，它接受iteratee，该函数为数组和值的每个元素调用，以生成用于比较它们的条件。结果值的顺序和引用由第一个数组决定。通过一个参数调用iteratee: 理解： 每个元素调用第三个参数传递的值，然后检查第一个数组中哪些值在后一个数组中没有，并返回不同元素组成的新数组，并不会改变元素组的值 Since：4.0.0 参数： array[Array]: 要检查的数组。 [values](...Array): 要排除的值，数组的扩展 [iteratee=_.identity](Function)： 每个元素调用的迭代器。 返回值： (Array): 返回不同元素组成的新数组 例子： _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor); // => [1.2] // The `_.property` iteratee shorthand. _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x'); // => [{ 'x': 2 }] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 15:16 "},"Array/_.differenceWith.html":{"url":"Array/_.differenceWith.html","title":"_.differenceWith","keywords":"","body":"_.differenceWith(array, [values], [comparator]) 官方解释： This method is like _.difference except that it accepts comparator which is invoked to compare elements of array to values. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal). 释义： 这个方法就像_.difference。唯一不同的是它接受比较器，比较器被调用来比较数组元素和值。结果值的顺序和引用由第一个数组决定。比较器通过两个参数调用:(arrVal, othVal)。 理解： 每个元素调用第三个参数传递的值比较前两个数组，并返回比较结果组成的新数组，并不会改变元素组的值 Since：4.0.0 参数： array[Array]: 要检查的数组。 [values](...Array): 要排除的值，数组的扩展 [comparator](Function)： 每个元素调用的比较器。 返回值： (Array): 返回不同元素组成的新数组 例子： var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]; _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual); // => [{ 'x': 2, 'y': 1 }] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 15:16 "},"Array/_.drop.html":{"url":"Array/_.drop.html","title":"_.drop","keywords":"","body":"_.drop(array, [n=1]) 官方解释： Creates a slice of array with n elements dropped from the beginning. 释义： 创建一个数组切片，从开始删除n个元素。 理解： 从0开始删除n个元素 Since：0.5.0 参数： array[Array]: 要查询的数组。 [n=1](number): 要删除的元素数量。 返回值： (Array): 删除之后的的数组 例子： _.drop([1, 2, 3]); // => [2, 3] _.drop([1, 2, 3], 2); // => [3] _.drop([1, 2, 3], 5); // => [] _.drop([1, 2, 3], 0); // => [1, 2, 3] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 15:19 "},"Array/_.dropRight.html":{"url":"Array/_.dropRight.html","title":"_.dropRight","keywords":"","body":"_.dropRight(array, [n=1]) 官方解释： Creates a slice of array with n elements dropped from the end. 释义： 创建一个数组切片，从末尾删除n个元素。 理解： 从数组的结尾删除n个元素 Since：3.0.0 参数： array[Array]: 要查询的数组。 [n=1](number): 要删除的元素数量。 返回值： (Array): 删除之后的的数组 例子： _.dropRight([1, 2, 3]); // => [1, 2] _.dropRight([1, 2, 3], 2); // => [1] _.dropRight([1, 2, 3], 5); // => [] _.dropRight([1, 2, 3], 0); // => [1, 2, 3] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 15:20 "},"Array/_.dropRightWhile.html":{"url":"Array/_.dropRightWhile.html","title":"_.dropRightWhile","keywords":"","body":".dropRightWhile(array, [predicate=.identity]) 官方解释： Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array). 释义： 创建一个数组切片，其中不包括从末尾删除的元素。元素被删除，直到谓词返回falsey。谓词由三个参数调用:(值、索引、数组)。 理解： 从末尾开始过滤数组，直到数组不满足条件，返回剩下的数组 Since：3.0.0 参数： array[Array]: 要查询的数组。 [n=1](number): 每次迭代调用的函数。 返回值： (Array): 返回数组的切片。 例子： var users = [ { 'user': 'barney', 'active': true }, { 'user': 'fred', 'active': false }, { 'user': 'pebbles', 'active': false } ]; _.dropRightWhile(users, function(o) { return !o.active; }); // => objects for ['barney'] // The `_.matches` iteratee shorthand. _.dropRightWhile(users, { 'user': 'pebbles', 'active': false }); // => objects for ['barney', 'fred'] // The `_.matchesProperty` iteratee shorthand. _.dropRightWhile(users, ['active', false]); // => objects for ['barney'] // The `_.property` iteratee shorthand. _.dropRightWhile(users, 'active'); // => objects for ['barney', 'fred', 'pebbles'] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:02 "},"Array/_.dropWhile.html":{"url":"Array/_.dropWhile.html","title":"_.dropWhile","keywords":"","body":".dropWhile(array, [predicate=.identity]) 官方解释： Creates a slice of array excluding elements dropped from the beginning. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array). 释义： 创建一个数组切片，其中不包括从开头删除的元素。元素被删除，直到谓词返回falsey。谓词由三个参数调用:(值、索引、数组)。 理解： 从起始开始过滤数组，直到数组不满足条件，返回剩下的数组 Since：3.0.0 参数： array[Array]: 要查询的数组。 [n=1](number): 每次迭代调用的函数。 返回值： (Array): 返回数组的切片。 例子： var users = [ { 'user': 'barney', 'active': false }, { 'user': 'fred', 'active': false }, { 'user': 'pebbles', 'active': true } ]; _.dropWhile(users, function(o) { return !o.active; }); // => objects for ['pebbles'] // The `_.matches` iteratee shorthand. _.dropWhile(users, { 'user': 'barney', 'active': false }); // => objects for ['fred', 'pebbles'] // The `_.matchesProperty` iteratee shorthand. _.dropWhile(users, ['active', false]); // => objects for ['pebbles'] // The `_.property` iteratee shorthand. _.dropWhile(users, 'active'); // => objects for ['barney', 'fred', 'pebbles'] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:05 "},"Array/_.fill.html":{"url":"Array/_.fill.html","title":"_.fill","keywords":"","body":"_.fill(array, value, [start=0], [end=array.length]) 官方解释： Fills elements of array with value from start up to, but not including, end. 释义： 从开始到结尾(但不包括end)填充数组元素。 理解： 这个方法会改变数组，可以为数组填充默认值。 Since：3.2.0 参数： array[Array]: 要查询的数组。 [value](*): 要填充数组的值。 [start=0](number): 起始位置 [end=array.length](number): 结束位置 返回值： (Array): 返回填充后的数组 例子： var array = [1, 2, 3]; _.fill(array, 'a'); console.log(array); // => ['a', 'a', 'a'] _.fill(Array(3), 2); // => [2, 2, 2] _.fill([4, 6, 8, 10], '*', 1, 3); // => [4, '*', '*', 10] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:18 "},"Array/_.findIndex.html":{"url":"Array/_.findIndex.html","title":"_.findIndex","keywords":"","body":".findIndex(array, [predicate=.identity], [fromIndex=0]) 官方解释： This method is like _.find except that it returns the index of the first element predicate returns truthy for instead of the element itself. 释义： 这个方法就像_.find,只返回第一个元素谓词的索引，而不是元素本身。 理解： 从前开始查询数组，直到找到这个元素，并返回这个元素的下标，找不到则返回-1 Since：1.1.0 参数： array[Array]: 要检查的数组。 [predicate=_.identity](Function): 每次迭代调用的函数。。 [fromIndex=0](number): 开始查询的位置 返回值： (Array): 返回查询到元素的下标，找不到则返回-1 例子： var users = [ { 'user': 'barney', 'active': false }, { 'user': 'fred', 'active': false }, { 'user': 'pebbles', 'active': true } ]; _.findIndex(users, function(o) { return o.user == 'barney'; }); // => 0 // The `_.matches` iteratee shorthand. _.findIndex(users, { 'user': 'fred', 'active': false }); // => 1 // The `_.matchesProperty` iteratee shorthand. _.findIndex(users, ['active', false]); // => 0 // The `_.property` iteratee shorthand. _.findIndex(users, 'active'); // => 2 Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:25 "},"Array/_.findLastIndex.html":{"url":"Array/_.findLastIndex.html","title":"_.findLastIndex","keywords":"","body":".findLastIndex(array, [predicate=.identity], [fromIndex=array.length-1]) 官方解释： This method is like _.findIndex except that it iterates over elements of collection from right to left. 释义： 这个方法就像_.findIndex，除了它从右到左遍历集合元素之外。 理解： 从末尾开始查询数组，直到找到这个元素，并返回这个元素的下标，找不到则返回-1 Since：2.0.0 参数： array[Array]: 要检查的数组。 [predicate=_.identity](Function): 每次迭代调用的函数。。 [fromIndex=array.length-1](number): 开始查询的位置 返回值： (Array): 返回查询到元素的下标，找不到则返回-1 例子： var users = [ { 'user': 'barney', 'active': true }, { 'user': 'fred', 'active': false }, { 'user': 'pebbles', 'active': false } ]; _.findLastIndex(users, function(o) { return o.user == 'pebbles'; }); // => 2 // The `_.matches` iteratee shorthand. _.findLastIndex(users, { 'user': 'barney', 'active': true }); // => 0 // The `_.matchesProperty` iteratee shorthand. _.findLastIndex(users, ['active', false]); // => 2 // The `_.property` iteratee shorthand. _.findLastIndex(users, 'active'); // => 0 Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:28 "},"Array/_.flatten.html":{"url":"Array/_.flatten.html","title":"_.flatten","keywords":"","body":"_.flatten(array) 官方解释： Flattens array a single level deep. 释义： 将数组压扁成一层。 理解： 二维数组合并成一维数组 Since：0.1.0 参数： array[Array]: 要拉平的数组。 返回值： (Array): 返回拉平后的数组，不是深拉平 例子： _.flatten([1, [2, [3, [4]], 5]]); // => [1, 2, [3, [4]], 5] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:34 "},"Array/_.flattenDeep.html":{"url":"Array/_.flattenDeep.html","title":"_.flattenDeep","keywords":"","body":"_.flattenDeep(array) 官方解释： Recursively flattens array. 释义： 无限递归拉平数组。 理解： 多维数组合并成一维数组 Since：3.0.0 参数： array[Array]: 要拉平的数组。 返回值： (Array): 返回拉平后的数组，深拉平 例子： _.flattenDeep([1, [2, [3, [4]], 5]]); // => [1, 2, 3, 4, 5] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:36 "},"Array/_.flattenDepth.html":{"url":"Array/_.flattenDepth.html","title":"_.flattenDepth","keywords":"","body":"_.flattenDepth(array, [depth=1]) 官方解释： Recursively flatten array up to depth times. 释义： 有限递归拉平数组 理解： 要拉平多少层数组，可以指定拉伸的层数 Since：4.4.0 参数： array[Array]: 要拉平的数组。 [depth=1](number): 要拉平的深度，默认为1，只拉平一层 返回值： (Array): 返回拉平后的数组，可以定义深度的拉平 例子： var array = [1, [2, [3, [4]], 5]]; _.flattenDepth(array, 1); // => [1, 2, [3, [4]], 5] _.flattenDepth(array, 2); // => [1, 2, 3, [4], 5] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:41 "},"Array/_.fromPairs.html":{"url":"Array/_.fromPairs.html","title":"_.fromPairs","keywords":"","body":"_.fromPairs(pairs) 官方解释： this method returns an object composed from key-value pairs. 释义： 该方法返回一个由键值对组成的对象。 理解： 把键值对数组转化成对象 Since：4.0.0 参数： pairs(Array): 键值对数组。 返回值： (Object): 返回一个对象 例子： _.fromPairs([['a', 1], ['b', 2]]); // => { 'a': 1, 'b': 2 } Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:50 "},"Array/_.head.html":{"url":"Array/_.head.html","title":"_.head","keywords":"","body":"_.head(array) 别名: _.first 官方解释： Gets the first element of array. 释义： 获取数组的第一个元素 理解： 把键值对数组转化成对象 Since：0.1.0 参数： array(Array): 要查询的数组。 返回值： (*): 返回数组的第一个元素 例子： _.head([1, 2, 3]); // => 1 _.head([]); // => undefined Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 17:58 "},"Array/_.indexOf.html":{"url":"Array/_.indexOf.html","title":"_.indexOf","keywords":"","body":"_.indexOf(array, value, [fromIndex=0]) 官方解释： Gets the index at which the first occurrence of value is found in array using SameValueZero for equality comparisons. If fromIndex is negative, it's used as the offset from the end of array. 释义： 获取数组中第一次出现值时所在的索引，使用SameValueZero进行相等性比较。如果fromIndex是负数，它被用作数组末尾的偏移量。 理解： 获取元素在数组中的位置，采用全等模式 Since：0.1.0 参数： array(Array): 要检查的数组。 value(*): 要查询的值 [fromIndex=0](number): 从什么位置开始查询 返回值： (number): 返回找到第一个匹配元素的下标 例子： _.indexOf([1, 2, 1, 2], 2); // => 1 // Search from the `fromIndex`. _.indexOf([1, 2, 1, 2], 2, 2); // => 3 Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 18:12 "},"Array/_.initial.html":{"url":"Array/_.initial.html","title":"_.initial","keywords":"","body":"_.initial(array) 官方解释： Gets all but the last element of array. 释义： 获取数组中除最后一个元素之外的所有元素。 理解： 获取数组中除最后一个元素之外的所有元素。 Since：0.1.0 参数： array(Array): 要查询的数组。 返回值： (Array): 返回切割之后的数组 例子： _.initial([1, 2, 3]); // => [1, 2] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 18:14 "},"Array/_.intersection.html":{"url":"Array/_.intersection.html","title":"_.intersection","keywords":"","body":"_.intersection([arrays]) 官方解释： Creates an array of unique values that are included in all given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array. 释义： 使用SameValueZero创建包含在所有给定数组中的唯一值数组，用于相等性比较。结果值的顺序和引用由第一个数组决定。 理解： 获取数组中的交集，并组成一个新的数组，采用全等模式 Since：0.1.0 参数： [array](...Array): 要检查的多个数组。 返回值： (Array): 返回多个数组的交集 例子： _.intersection([2, 1], [2, 3], [4, 2]); // => [2] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 18:18 "},"Array/_.intersectionBy.html":{"url":"Array/_.intersectionBy.html","title":"_.intersectionBy","keywords":"","body":".intersectionBy([arrays], [iteratee=.identity]) 官方解释： Creates an array of unique values that are included in all given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array. 释义： 这个方法类似于_.intersection，只是它接受迭代器，每个数组的每个元素都会调用迭代器来生成比较它们的条件。结果值的顺序和引用由第一个数组决定。通过一个参数调用迭代器:(value)。 理解： 可以在回调函数中定义多个数组以什么方式交集。 Since：4.0.0 参数： [array](...Array): 要检查的多个数组。 [iteratee=_.identity](Function): 每个元素调用的迭代器。 返回值： (Array): 返回多个数组的交集 例子： _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor); // => [2.1] // The `_.property` iteratee shorthand. _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x'); // => [{ 'x': 1 }] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 18:32 "},"Array/_.intersectionwith.html":{"url":"Array/_.intersectionwith.html","title":"_.intersectionWith","keywords":"","body":"_.intersectionWith([arrays], [comparator]) 官方解释： This method is like _.intersection except that it accepts comparator which is invoked to compare elements of arrays. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal). 释义： 这个方法类似于_.intersection，只是它接受比较器，比较器被调用来比较数组的元素。结果值的顺序和引用由第一个数组决定。比较器通过两个参数调用:(arrVal, othVal)。 理解： 可以在回调函数中定义多个数组以比较的方式交集。 Since：4.0.0 参数： [array](...Array): 要检查的多个数组。 [comparator](Function): 每个元素调用的迭代器。 返回值： (Array): 返回多个数组的交集 例子： var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]; var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]; _.intersectionWith(objects, others, _.isEqual); // => [{ 'x': 1, 'y': 2 }] Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 18:28 "},"Array/_.join.html":{"url":"Array/_.join.html","title":"_.join","keywords":"","body":"_.join(array, [separator=',']) 官方解释： Converts all elements in array into a string separated by separator. 释义： 将数组中的所有元素转换为用分隔符分隔的字符串。 理解： 将数组转成字符串 Since：4.0.0 参数： array(Array): 要转换的数组。 [separator=','](String): 每个元素的分离器。 返回值： (string): 返回转换后的字符串 例子： _.join(['a', 'b', 'c'], '~'); // => 'a~b~c' Copyright © lucky__star 2020 all right reserved，powered by Gitbook本书发布时间： 2020-04-01 18:35 "}}